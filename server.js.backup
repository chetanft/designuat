import express from 'express';
import { promises as fs } from 'fs';
import path from 'path';
import { FigmaUrlParser } from './src/figma/urlParser.js';

const app = express();
const port = process.env.PORT || 3003;

// Middleware
app.use(express.json());
app.use(express.static('public'));

// Basic configuration
const defaultConfig = {
  comparison: {
    thresholds: { fontSize: 2, spacing: 4, borderRadius: 2, colorTolerance: 5 }
  },
  output: { reportDir: "./output/reports" }
};

// Routes
app.get('/', (req, res) => {
  res.json({
    name: 'Figma-Web Comparison Tool',
    version: '1.0.0',
    status: 'running',
    message: 'Welcome to the Figma-Web Comparison Tool!'
  });
});

app.get('/api/health', (req, res) => {
  res.json({ status: 'healthy', timestamp: new Date().toISOString() });
});

app.get('/api/reports', async (req, res) => {
  try {
    const reportsDir = './output/reports';
    try {
      const files = await fs.readdir(reportsDir);
      const reports = files
        .filter(file => file.endsWith('.html') || file.endsWith('.json'))
        .map(file => ({
          name: file,
          path: `/reports/${file}`,
          type: file.endsWith('.html') ? 'html' : 'json'
        }));
      res.json({ reports });
    } catch (error) {
      res.json({ reports: [] });
    }
  } catch (error) {
    res.status(500).json({ error: 'Failed to list reports' });
  }
});

// Demo comparison endpoint
app.post('/api/compare', async (req, res) => {
  try {
    const { figmaUrl, figmaFileId, webUrl, authentication } = req.body;

    // Handle both old format (figmaFileId) and new format (figmaUrl)
    let parsedFigmaData = null;
    let fileId = figmaFileId;
    let nodeId = req.body.figmaNodeId;

    if (figmaUrl) {
      try {
        parsedFigmaData = FigmaUrlParser.parseUrl(figmaUrl);
        fileId = parsedFigmaData.fileId;
        nodeId = parsedFigmaData.nodeId;
      } catch (error) {
        return res.status(400).json({
          error: 'Invalid Figma URL: ' + error.message
        });
      }
    }

    if (!fileId || !webUrl) {
      return res.status(400).json({
        error: 'Missing required parameters: figmaUrl (or figmaFileId) and webUrl'
      });
    }

    // Validate authentication if provided
    if (authentication) {
      const validAuthTypes = ['credentials', 'cookies', 'headers', 'manual', 'session'];
      if (!validAuthTypes.includes(authentication.type)) {
        return res.status(400).json({
          error: 'Invalid authentication type. Must be one of: ' + validAuthTypes.join(', ')
        });
      }

      // Additional validation for credentials
      if (authentication.type === 'credentials') {
        if (!authentication.loginUrl || !authentication.username || !authentication.password) {
          return res.status(400).json({
            error: 'Credentials authentication requires loginUrl, username, and password'
          });
        }
      }
    }

    // Simulate processing delay (longer for authenticated requests)
    const processingTime = authentication ? 5000 : 2000;
    await new Promise(resolve => setTimeout(resolve, processingTime));

    // Create a sample report
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const reportData = {
      metadata: {
        figma: {
          url: figmaUrl || null,
          fileId: fileId,
          nodeId: nodeId || null,
          fileName: parsedFigmaData?.fileName || null,
          urlType: parsedFigmaData?.urlType || 'file'
        },
        webUrl: webUrl,
        comparedAt: new Date().toISOString(),
        authentication: authentication ? {
          type: authentication.type,
          enabled: true,
          ...(authentication.type === 'credentials' && { loginUrl: authentication.loginUrl })
        } : { enabled: false },
        totalDeviations: authentication ? 3 : 2,
        severity: authentication ? { high: 0, medium: 2, low: 1 } : { high: 0, medium: 1, low: 1 }
      },
      comparisons: [
        {
          componentId: "1:2",
          componentName: "Primary Button",
          componentType: "FRAME",
          selector: ".btn-primary",
          deviations: [
            {
              property: 'fontSize',
              figmaValue: '16px',
              webValue: '14px',
              difference: '2px',
              severity: 'medium',
              message: 'Font size differs by 2px'
            },
            {
              property: 'paddingTop',
              figmaValue: '12px',
              webValue: '10px',
              difference: '2px',
              severity: 'low',
              message: 'Padding differs by 2px'
            }
          ],
          matches: [
            {
              property: 'backgroundColor',
              value: '#3366ff',
              message: 'Background color matches'
            }
          ]
        }
      ]
    };

    // Generate HTML report
    const htmlContent = generateHtmlReport(reportData);
    const htmlPath = `./output/reports/demo-report-${timestamp}.html`;
    await fs.mkdir('./output/reports', { recursive: true });
    await fs.writeFile(htmlPath, htmlContent);

    // Generate JSON report
    const jsonPath = `./output/reports/demo-report-${timestamp}.json`;
    await fs.writeFile(jsonPath, JSON.stringify(reportData, null, 2));

    res.json({
      success: true,
      summary: {
        componentsAnalyzed: 1,
        totalDeviations: reportData.metadata.totalDeviations,
        severity: reportData.metadata.severity,
        authentication: authentication ? authentication.type : 'none'
      },
      reports: {
        html: htmlPath.replace('./output', ''),
        json: jsonPath.replace('./output', '')
      }
    });

  } catch (error) {
    console.error('Comparison error:', error);
    res.status(500).json({
      error: 'Comparison failed',
      message: error.message
    });
  }
});

// Serve reports
app.use('/reports', express.static('./output/reports'));

function generateHtmlReport(data) {
  return `<!DOCTYPE html>
<html>
<head>
    <title>Demo Comparison Report</title>
    <style>
        body { font-family: system-ui, sans-serif; margin: 40px; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 12px; margin-bottom: 30px; }
        .component { border: 1px solid #eee; border-radius: 8px; margin: 20px 0; overflow: hidden; }
        .component-header { background: #f8f9fa; padding: 15px; font-weight: bold; }
        .deviation { background: #fff5f5; border-left: 4px solid #dc3545; padding: 15px; margin: 10px; }
        .match { background: #f0fff4; border-left: 4px solid #28a745; padding: 15px; margin: 10px; }
        .severity-medium { color: #ffc107; font-weight: bold; }
        .severity-low { color: #fd7e14; font-weight: bold; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üé® Figma-Web Comparison Report</h1>
        <p>Demo Report - Generated ${new Date().toLocaleString()}</p>
    </div>
    
    <h2>Summary</h2>
    <p><strong>Figma Design:</strong> ${data.metadata.figma.fileName || 'Unknown'} 
       ${data.metadata.figma.nodeId ? `(Node: ${data.metadata.figma.nodeId})` : '(Full File)'}</p>
    ${data.metadata.figma.url ? `<p><strong>Figma URL:</strong> <a href="${data.metadata.figma.url}" target="_blank">${data.metadata.figma.url}</a></p>` : ''}
    <p><strong>Web URL:</strong> <a href="${data.metadata.webUrl}" target="_blank">${data.metadata.webUrl}</a></p>
    <p><strong>Authentication:</strong> ${data.metadata.authentication.enabled ? 
      `‚úÖ ${data.metadata.authentication.type.toUpperCase()}` : '‚ùå Not Required'}</p>
    <p><strong>Total Deviations:</strong> ${data.metadata.totalDeviations}</p>
    <p><strong>Medium Severity:</strong> ${data.metadata.severity.medium}</p>
    <p><strong>Low Severity:</strong> ${data.metadata.severity.low}</p>
    
    <h2>Component Analysis</h2>
    ${data.comparisons.map(comp => `
        <div class="component">
            <div class="component-header">
                ${comp.componentName} (${comp.componentType})
            </div>
            ${comp.deviations.map(dev => `
                <div class="deviation">
                    <strong class="severity-${dev.severity}">${dev.property}</strong>: 
                    Figma: ${dev.figmaValue}, Web: ${dev.webValue}
                    <br><small>${dev.message}</small>
                </div>
            `).join('')}
            ${comp.matches.map(match => `
                <div class="match">
                    <strong>${match.property}</strong>: ${match.value}
                    <br><small>${match.message}</small>
                </div>
            `).join('')}
        </div>
    `).join('')}
</body>
</html>`;
}

app.listen(port, () => {
  console.log(`üåê Figma-Web Comparison Tool running at http://localhost:${port}`);
  console.log(`üìä Open http://localhost:${port} in your browser`);
}); 